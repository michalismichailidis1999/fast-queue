#pragma once

#include "./__linux/memcpy_s.h"

enum class RequestType {
	NONE = 0,
	CREATE_QUEUE,
	DELETE_QUEUE,
	PRODUCE,
	CONSUME,
	ACK,
	GET_CONTROLLERS_CONNECTION_INFO,
	GET_CONTROLLER_LEADER_ID,
	GET_QUEUE_PARTITIONS_INFO,
	REGISTER_CONSUMER,
	GET_CONSUMER_ASSIGNED_PARTITIONS,

	// Internal
	DATA_NODE_HEARTBEAT,
	GET_CLUSTER_METADATA_UPDATES,
	EXPIRE_CONSUMERS,

	// Raft
	REQUEST_VOTE,
	APPEND_ENTRIES
};

enum class ErrorCode {
	NONE,
	INTERNAL_SERVER_ERROR,
	INCORRECT_REQUEST_BODY,
	INCORRECT_PARTITION_NUMBER,
	QUEUE_DOES_NOT_EXIST,
	PARTITION_DOES_NOT_EXIST,
	INCORRECT_ACTION,
	INCORRECT_LEADER,
	INCORRECT_MESSAGE_COUNT,
	TOO_MANY_BYTES_RECEIVED,
	UNAUTHORIZED,
	TOO_FEW_AVAILABLE_NODES,
	UNASSIGNED_LEADERSHIP,
	CONSUMER_NOT_FOUND,
	INCORRECT_CONSUMER_GROUP_ID,
	QUEUE_ALREADY_EXISTS,
	CONSUMER_UNREGISTERED
};

enum class RequestValueKey {
	// Version 1
	
	// External Communication
	USERNAME = 1,
	PASSWORD,
	REQUEST_TYPE,
	QUEUE_NAME, // should be followed after queue name length
	PARTITIONS,
	REPLICATION_FACTOR,
	PARTITION,
	MESSAGES,
	CONSUMER_GROUP_ID,
	CONSUME_FROM,
	CONSUMER_ID,
	MESSAGE_OFFSET,
	READ_SINGLE_OFFSET_ONLY,

	// Internal Communication
	NODE_ID,
	NODE_ADDRESS,
	NODE_PORT,
	NODE_EXTERNAL_ADDRESS,
	NODE_EXTERNAL_PORT,
	COMMAND_ID,
	REGISTER_NODE,
	EXPIRED_CONSUMERS,

	// Raft
	LEADER_ID,
	CANDIDATE_ID,
	TERM,
	LAST_LOG_INDEX,
	LAST_LOG_TERM,
	PREV_LOG_INDEX,
	PREV_LOG_TERM,
	LEADER_COMMIT,
	COMMANDS,
	INDEX_MATCHED,
	IS_FIRST_REQUEST
	// =====================================================
};

enum class ResponseValueKey {
	ERROR_MESSAGE,
	
	OK = 1,
	LEADER_ID,
	CONTROLLER_CONNECTION_INFO,
	TOTAL_PARTITIONS,
	PARTITION_NODE_CONNECTION_INFO,
	CONSUMER_ID,
	ASSIGNED_PARTITIONS,
	MESSAGES,
	QUEUE_CREATED,
	QUEUE_DELETED,

	// Internal Only
	TERM,
	SUCCESS,
	VOTE_GRANTED,
	LOG_MATCHED
};

enum class LogTraceType {
	DEBUG,
	INFO,
	WARN,
	ERR
};

enum class Status {
	UNKNOWN,
	PENDING_CREATION,
	ACTIVE,
	PENDING_DELETION
};

enum class CompressionAlgorithm {
	LZ4
};

enum class NodeState {
	FOLLOWER,
	CANDIDATE,
	LEADER
};

enum class MessageType {
	MESSAGE,
	MARKER
};

enum class CommandType {
	NONE,
	CREATE_QUEUE,
	DELETE_QUEUE,
	ALTER_PARTITION_ASSIGNMENT,
	ALTER_PARTITION_LEADER_ASSIGNMENT,
	REGISTER_DATA_NODE,
	UNREGISTER_DATA_NODE,
	REGISTER_CONSUMER_GROUP,
	UNREGISTER_CONSUMER_GROUP
};

enum class CommitMarkerStatus {
	COMMITED,
	ABORTED
};

// for BTree
enum class PageType {
	NON_LEAF,
	LEAF
};

enum class TriePageType {
	ROOT,
	EXTENSION
};

enum class CleanupPolicyType {
	DELETE_SEGMENTS = 0,
	COMPACT_SEGMENTS = 1
};